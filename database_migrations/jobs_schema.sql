-- ===================================
-- JOBS TABLE SCHEMA
-- ===================================

-- Enable required extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create jobs table
CREATE TABLE IF NOT EXISTS jobs (
    job_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL,
    job_title VARCHAR(500) NOT NULL,
    company_name VARCHAR(255) NOT NULL,
    location VARCHAR(255),
    salary_range VARCHAR(100),
    job_description TEXT,
    linkedin_url VARCHAR(1000),
    date_posted DATE,
    date_found TIMESTAMP WITH TIME ZONE DEFAULT now(),
    work_arrangement VARCHAR(50),
    experience_level VARCHAR(50),
    job_type VARCHAR(50),
    gemini_evaluation JSONB,
    gemini_score NUMERIC,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    job_url TEXT,
    
    -- Constraints
    CONSTRAINT valid_gemini_score CHECK (
        gemini_score IS NULL OR (gemini_score >= 0 AND gemini_score <= 100)
    ),
    CONSTRAINT valid_work_arrangement CHECK (
        work_arrangement IS NULL OR work_arrangement IN ('remote', 'hybrid', 'onsite')
    ),
    CONSTRAINT valid_experience_level CHECK (
        experience_level IS NULL OR experience_level IN ('entry', 'mid', 'senior', 'executive', 'internship')
    ),
    CONSTRAINT valid_job_type CHECK (
        job_type IS NULL OR job_type IN ('full-time', 'part-time', 'contract', 'temporary', 'internship')
    )
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_jobs_user_id ON jobs(user_id);
CREATE INDEX IF NOT EXISTS idx_jobs_company_name ON jobs(company_name);
CREATE INDEX IF NOT EXISTS idx_jobs_job_title ON jobs(job_title);
CREATE INDEX IF NOT EXISTS idx_jobs_date_posted ON jobs(date_posted);
CREATE INDEX IF NOT EXISTS idx_jobs_date_found ON jobs(date_found);
CREATE INDEX IF NOT EXISTS idx_jobs_gemini_score ON jobs(gemini_score);
CREATE INDEX IF NOT EXISTS idx_jobs_work_arrangement ON jobs(work_arrangement);
CREATE INDEX IF NOT EXISTS idx_jobs_experience_level ON jobs(experience_level);
CREATE INDEX IF NOT EXISTS idx_jobs_job_type ON jobs(job_type);
CREATE INDEX IF NOT EXISTS idx_jobs_location ON jobs(location);

-- Create composite indexes for common queries
CREATE INDEX IF NOT EXISTS idx_jobs_user_gemini_score ON jobs(user_id, gemini_score DESC);
CREATE INDEX IF NOT EXISTS idx_jobs_user_date_found ON jobs(user_id, date_found DESC);

-- Enable Row Level Security
ALTER TABLE jobs ENABLE ROW LEVEL SECURITY;

-- RLS Policies (for Supabase)
CREATE POLICY "Users can view own jobs" ON jobs
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own jobs" ON jobs
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own jobs" ON jobs
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete own jobs" ON jobs
    FOR DELETE USING (auth.uid() = user_id);

-- Create trigger function for updated_at
CREATE OR REPLACE FUNCTION update_jobs_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger
DROP TRIGGER IF EXISTS update_jobs_updated_at ON jobs;
CREATE TRIGGER update_jobs_updated_at 
    BEFORE UPDATE ON jobs 
    FOR EACH ROW 
    EXECUTE FUNCTION update_jobs_updated_at();

-- Grant permissions
GRANT ALL ON jobs TO authenticated;

-- Add comments
COMMENT ON TABLE jobs IS 'Job postings scraped from various sources with AI qualification analysis';
COMMENT ON COLUMN jobs.gemini_score IS 'AI qualification score (0-100) generated by Google Gemini';
COMMENT ON COLUMN jobs.gemini_evaluation IS 'JSONB containing detailed AI analysis and reasoning';
COMMENT ON COLUMN jobs.job_url IS 'Alternative job URL (different from LinkedIn URL)';
COMMENT ON COLUMN jobs.linkedin_url IS 'LinkedIn-specific job posting URL';
COMMENT ON COLUMN jobs.date_posted IS 'Date when job was originally posted by company';
COMMENT ON COLUMN jobs.date_found IS 'Timestamp when job was scraped/found by our system';